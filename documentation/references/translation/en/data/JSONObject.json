{"constructors":[],"classname":"JSONObject","examples":"","related":["libraries/data/JSONArray.html","loadJSONObject_.html","loadJSONArray_.html","saveJSONObject_.html","saveJSONArray_.html"],"methods":[{"name":"getString()","desc":"Gets the string value associated with a key"},{"name":"getInt()","desc":"Gets the int value associated with a key"},{"name":"getFloat()","desc":"Gets the float value associated with a key"},{"name":"getBoolean()","desc":"Gets the boolean value associated with a key"},{"name":"getJSONArray()","desc":"Gets the JSONArray value associated with a key"},{"name":"getJSONObject()","desc":"Gets the JSONObject value associated with a key"},{"name":"isNull()","desc":"Determine if the value associated with the key is null or if there is\n no value."},{"name":"setString()","desc":"Put a key/String pair in the JSONObject"},{"name":"setInt()","desc":"Put a key/int pair in the JSONObject"},{"name":"setFloat()","desc":"Put a key/float pair in the JSONObject"},{"name":"setBoolean()","desc":"Put a key/boolean pair in the JSONObject"},{"name":"setJSONObject()","desc":"Sets the JSONObject value associated with a key"},{"name":"setJSONArray()","desc":"Sets the JSONArray value associated with a key"}],"csspath":"../../","isLibrary":"true","classFields":[],"description":"A JSONObject is an unordered collection of name/value pairs. Its external\n form is a string wrapped in curly braces with colons between the names and\n values, and commas between the values and names. The internal form is an\n object having <code>get<\/code> and <code>opt<\/code> methods for accessing the\n values by name, and <code>put<\/code> methods for adding or replacing values\n by name. The values can be any of these types: <code>Boolean<\/code>,\n <code>JSONArray<\/code>, <code>JSONObject<\/code>, <code>Number<\/code>,\n <code>String<\/code>, or the <code>JSONObject.NULL<\/code> object. A JSONObject\n constructor can be used to convert an external form JSON text into an\n internal form whose values can be retrieved with the <code>get<\/code> and\n <code>opt<\/code> methods, or to convert values into a JSON text using the\n <code>put<\/code> and <code>toString<\/code> methods. A <code>get<\/code> method\n returns a value if one can be found, and throws an exception if one cannot be\n found. An <code>opt<\/code> method returns a default value instead of throwing\n an exception, and so is useful for obtaining optional values.\n <p>\n The generic <code>get()<\/code> and <code>opt()<\/code> methods return an\n object, which you can cast or query for type. There are also typed\n <code>get<\/code> and <code>opt<\/code> methods that do type checking and type\n coercion for you. The opt methods differ from the get methods in that they do\n not throw. Instead, they return a specified value, such as null.\n <p>\n The <code>put<\/code> methods add or replace values in an object. For example,\n\n <pre>\n myString = new JSONObject().put(&quot;JSON&quot;, &quot;Hello, World!&quot;).toString();\n <\/pre>\n\n produces the string <code>{\"JSON\": \"Hello, World\"}<\/code>.\n <p>\n The texts produced by the <code>toString<\/code> methods strictly conform to\n the JSON syntax rules. The constructors are more forgiving in the texts they\n will accept:\n <ul>\n <li>An extra <code>,<\/code>&nbsp;<small>(comma)<\/small> may appear just\n before the closing brace.<\/li>\n <li>Strings may be quoted with <code>'<\/code>&nbsp;<small>(single\n quote)<\/small>.<\/li>\n <li>Strings do not need to be quoted at all if they do not begin with a quote\n or single quote, and if they do not contain leading or trailing spaces, and\n if they do not contain any of these characters:\n <code>{ } [ ] / \\ : , = ; #<\/code> and if they do not look like numbers and\n if they are not the reserved words <code>true<\/code>, <code>false<\/code>, or\n <code>null<\/code>.<\/li>\n <li>Keys can be followed by <code>=<\/code> or {@code =>} as well as by\n <code>:<\/code>.<\/li>\n <li>Values can be followed by <code>;<\/code> <small>(semicolon)<\/small> as\n well as by <code>,<\/code> <small>(comma)<\/small>.<\/li>\n <\/ul>","classanchor":"libraries/data/JSONObject.html","parameters":[]}