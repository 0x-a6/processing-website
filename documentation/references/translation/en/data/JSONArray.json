{"constructors":["JSONArray("],"classname":"JSONArray","examples":"","related":["libraries/data/JSONObject.html","loadJSONObject_.html","loadJSONArray_.html","saveJSONObject_.html","saveJSONArray_.html"],"methods":[{"name":"getString()","desc":"Gets the String value associated with an index"},{"name":"getInt()","desc":"Gets the int value associated with an index"},{"name":"getFloat()","desc":"Gets the float value associated with an index"},{"name":"getBoolean()","desc":"Gets the boolean value associated with an index"},{"name":"getJSONArray()","desc":"Gets the JSONArray associated with an index value"},{"name":"getJSONObject()","desc":"Gets the JSONObject associated with an index value"},{"name":"getStringArray()","desc":"Gets the entire array as an array of Strings"},{"name":"getIntArray()","desc":"Gets the entire array as array of ints"},{"name":"append()","desc":"Appends a value, increasing the array's length by one"},{"name":"setString()","desc":"Put a String value in the JSONArray"},{"name":"setInt()","desc":"Put an int value in the JSONArray"},{"name":"setFloat()","desc":"Put a float value in the JSONArray"},{"name":"setBoolean()","desc":"Put a boolean value in the JSONArray"},{"name":"setJSONArray()","desc":"Sets the JSONArray value associated with an index value"},{"name":"setJSONObject()","desc":"Sets the JSONObject value associated with an index value"},{"name":"size()","desc":"Gets the number of elements in the JSONArray"},{"name":"isNull()","desc":"Determine if the value is null."},{"name":"remove()","desc":"Removes an element"}],"csspath":"../../","isLibrary":"true","classFields":[],"description":"A JSONArray is an ordered sequence of values. Its external text form is a\n string wrapped in square brackets with commas separating the values. The\n internal form is an object having <code>get<\/code> and <code>opt<\/code>\n methods for accessing the values by index, and <code>put<\/code> methods for\n adding or replacing values. The values can be any of these types:\n <code>Boolean<\/code>, <code>JSONArray<\/code>, <code>JSONObject<\/code>,\n <code>Number<\/code>, <code>String<\/code>, or the\n <code>JSONObject.NULL object<\/code>.\n <p>\n The constructor can convert a JSON text into a Java object. The\n <code>toString<\/code> method converts to JSON text.\n <p>\n A <code>get<\/code> method returns a value if one can be found, and throws an\n exception if one cannot be found. An <code>opt<\/code> method returns a\n default value instead of throwing an exception, and so is useful for\n obtaining optional values.\n <p>\n The generic <code>get()<\/code> and <code>opt()<\/code> methods return an\n object which you can cast or query for type. There are also typed\n <code>get<\/code> and <code>opt<\/code> methods that do type checking and type\n coercion for you.\n <p>\n The texts produced by the <code>toString<\/code> methods strictly conform to\n JSON syntax rules. The constructors are more forgiving in the texts they will\n accept:\n <ul>\n <li>An extra <code>,<\/code>&nbsp;<small>(comma)<\/small> may appear just\n before the closing bracket.<\/li>\n <li>The <code>null<\/code> value will be inserted when there is <code>,<\/code>\n &nbsp;<small>(comma)<\/small> elision.<\/li>\n <li>Strings may be quoted with <code>'<\/code>&nbsp;<small>(single\n quote)<\/small>.<\/li>\n <li>Strings do not need to be quoted at all if they do not begin with a quote\n or single quote, and if they do not contain leading or trailing spaces, and\n if they do not contain any of these characters:\n <code>{ } [ ] / \\ : , = ; #<\/code> and if they do not look like numbers and\n if they are not the reserved words <code>true<\/code>, <code>false<\/code>, or\n <code>null<\/code>.<\/li>\n <li>Values can be separated by <code>;<\/code> <small>(semicolon)<\/small> as\n well as by <code>,<\/code> <small>(comma)<\/small>.<\/li>\n <\/ul>","type":"class","classanchor":"libraries/data/JSONArray.html","parameters":[]}