{
  "brief": "A JSONObject is an unordered collection of name/value pairs.",
  "methods": [
    {
      "anchor": "JSONObject_getString_",
      "name": "getString()",
      "desc": "Gets the String value associated with the specified key"
    },
    {
      "anchor": "JSONObject_getInt_",
      "name": "getInt()",
      "desc": "Gets the int value associated with the specified key"
    },
    {
      "anchor": "JSONObject_getFloat_",
      "name": "getFloat()",
      "desc": "Gets the float value associated with a key"
    },
    {
      "anchor": "JSONObject_getBoolean_",
      "name": "getBoolean()",
      "desc": "Gets the boolean value associated with the specified key"
    },
    {
      "anchor": "JSONObject_getJSONArray_",
      "name": "getJSONArray()",
      "desc": "Retrieves the <b>JSONArray</b> with the associated key"
    },
    {
      "anchor": "JSONObject_getJSONObject_",
      "name": "getJSONObject()",
      "desc": "Given a key value, retrieves the associated <b>JSONObject</b>"
    },
    {
      "anchor": "JSONObject_isNull_",
      "name": "isNull()",
      "desc": "Determines if the value associated with the key is <b>null</b>, that is has \n no defined value (<b>false</b>) or if it has a value (<b>true</b>)."
    },
    {
      "anchor": "JSONObject_setString_",
      "name": "setString()",
      "desc": "Inserts a new key/String pair into the <b>JSONObject</b>"
    },
    {
      "anchor": "JSONObject_setInt_",
      "name": "setInt()",
      "desc": "Inserts a new key/int pair into the <b>JSONObject</b>"
    },
    {
      "anchor": "JSONObject_setFloat_",
      "name": "setFloat()",
      "desc": "Put a key/float pair in the JSONObject"
    },
    {
      "anchor": "JSONObject_setBoolean_",
      "name": "setBoolean()",
      "desc": "Put a key/boolean pair in the JSONObject"
    },
    {
      "anchor": "JSONObject_setJSONObject_",
      "name": "setJSONObject()",
      "desc": "Sets the value of the <b>JSONObject</b> with the associated key"
    },
    {
      "anchor": "JSONObject_setJSONArray_",
      "name": "setJSONArray()",
      "desc": "Sets the value of the <b>JSONArray</b> with the associated key"
    }
  ],
  "csspath": "../../",
  "isLibrary": "true",
  "classFields": [],
  "description": "A <b>JSONObject</b> stores JSON data with multiple name/value pairs. Values\n can be numeric, Strings, booleans, other <b>JSONObject</b>s or\n <b>JSONArray</b>s, or null. <b>JSONObject</b> and <b>JSONArray</b> objects\n are quite similar and share most of the same methods; the primary difference\n is that the latter stores an array of JSON objects, while the former\n represents a single JSON object.<br />\n <br />\n JSON can be generated from scratch, dynamically, or using data from an\n existing file. JSON can also be output and saved to disk, as in the example\n above.\n \n \n A JSONObject is an unordered collection of name/value pairs. Its external\n form is a string wrapped in curly braces with colons between the names and\n values, and commas between the values and names. The internal form is an\n object having <code>get</code> and <code>opt</code> methods for accessing the\n values by name, and <code>put</code> methods for adding or replacing values\n by name. The values can be any of these types: <code>Boolean</code>,\n <code>JSONArray</code>, <code>JSONObject</code>, <code>Number</code>,\n <code>String</code>, or the <code>JSONObject.NULL</code> object. A JSONObject\n constructor can be used to convert an external form JSON text into an\n internal form whose values can be retrieved with the <code>get</code> and\n <code>opt</code> methods, or to convert values into a JSON text using the\n <code>put</code> and <code>toString</code> methods. A <code>get</code> method\n returns a value if one can be found, and throws an exception if one cannot be\n found. An <code>opt</code> method returns a default value instead of throwing\n an exception, and so is useful for obtaining optional values.\n <p>\n The generic <code>get()</code> and <code>opt()</code> methods return an\n object, which you can cast or query for type. There are also typed\n <code>get</code> and <code>opt</code> methods that do type checking and type\n coercion for you. The opt methods differ from the get methods in that they do\n not throw. Instead, they return a specified value, such as null.\n <p>\n The <code>put</code> methods add or replace values in an object. For example,\n\n <pre>\n myString = new JSONObject().put(&quot;JSON&quot;, &quot;Hello, World!&quot;).toString();\n </pre>\n\n produces the string <code>{\"JSON\": \"Hello, World\"}</code>.\n <p>\n The texts produced by the <code>toString</code> methods strictly conform to\n the JSON syntax rules. The constructors are more forgiving in the texts they\n will accept:\n <ul>\n <li>An extra <code>,</code>&nbsp;<small>(comma)</small> may appear just\n before the closing brace.</li>\n <li>Strings may be quoted with <code>'</code>&nbsp;<small>(single\n quote)</small>.</li>\n <li>Strings do not need to be quoted at all if they do not begin with a quote\n or single quote, and if they do not contain leading or trailing spaces, and\n if they do not contain any of these characters:\n <code>{ } [ ] / \\ : , = ; #</code> and if they do not look like numbers and\n if they are not the reserved words <code>true</code>, <code>false</code>, or\n <code>null</code>.</li>\n <li>Keys can be followed by <code>=</code> or {@code =>} as well as by\n <code>:</code>.</li>\n <li>Values can be followed by <code>;</code> <small>(semicolon)</small> as\n well as by <code>,</code> <small>(comma)</small>.</li>\n </ul>",
  "type": "class",
  "constructors": [],
  "related": [
    "JSONArray",
    "loadJSONObject_",
    "loadJSONArray_",
    "saveJSONObject_",
    "saveJSONArray_"
  ],
  "name": "JSONObject",
  "classanchor": "JSONObject",
  "category": "data",
  "subcategory": "composite",
  "parameters": []
}
