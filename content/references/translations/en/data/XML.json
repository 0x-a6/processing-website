{
  "constructors": ["XML(name)"],
  "classname": "XML",
  "examples": "",
  "related": ["loadXML_.html", "parseXML_.html", "saveXML_.html"],
  "methods": [
    { "name": "parse()", "desc": "Converts String content to an XML object" },
    { "name": "getParent()", "desc": "Gets a copy of the element's parent" },
    { "name": "getName()", "desc": "Gets the element's full name" },
    { "name": "setName()", "desc": "Sets the element's name" },
    {
      "name": "getChildCount()",
      "desc": "Returns the element's number of children"
    },
    {
      "name": "hasChildren()",
      "desc": "Checks whether or not an element has any children"
    },
    {
      "name": "listChildren()",
      "desc": "Returns the names of all children as an array"
    },
    {
      "name": "getChildren()",
      "desc": "Returns an array containing all child elements"
    },
    {
      "name": "getChild()",
      "desc": "Returns the child element with the specified index value or path"
    },
    { "name": "addChild()", "desc": "Appends a new child to the element" },
    { "name": "removeChild()", "desc": "Removes the specified child" },
    {
      "name": "getAttributeCount()",
      "desc": "Counts the specified element's number of attributes"
    },
    {
      "name": "listAttributes()",
      "desc": "Returns a list of names of all attributes as an array"
    },
    {
      "name": "hasAttribute()",
      "desc": "Checks whether or not an element has the specified attribute"
    },
    {
      "name": "getString()",
      "desc": "Gets the content of an attribute as a String"
    },
    {
      "name": "setString()",
      "desc": "Sets the content of an attribute as a String"
    },
    {
      "name": "getInt()",
      "desc": "Gets the content of an attribute as an int"
    },
    {
      "name": "setInt()",
      "desc": "Sets the content of an attribute as an int"
    },
    { "name": "setLong()", "desc": "Sets the content of an element as an int" },
    {
      "name": "getFloat()",
      "desc": "Gets the content of an attribute as a float"
    },
    {
      "name": "setFloat()",
      "desc": "Sets the content of an attribute as a float"
    },
    { "name": "getContent()", "desc": "Gets the content of an element" },
    {
      "name": "getIntContent()",
      "desc": "Gets the content of an element as an int"
    },
    {
      "name": "getFloatContent()",
      "desc": "Gets the content of an element as a float"
    },
    { "name": "setContent()", "desc": "Sets the content of an element" },
    { "name": "format()", "desc": "Formats XML data as a String" },
    {
      "name": "toString()",
      "desc": "Gets XML data as a String using default formatting"
    }
  ],
  "csspath": "../../",
  "isLibrary": "true",
  "classFields": [],
  "description": "This is the base class used for the Processing XML library,\n representing a single node of an XML tree.",
  "type": "class",
  "classanchor": "libraries/data/XML.html",
  "parameters": [
    {
      "name": "name",
      "description": "creates a node with this name",
      "type": ["String"]
    }
  ]
}
