{
  "name": "color",
  "brief": "Datatype for storing color values",
  "description": "Datatype for storing color values. Colors may be assigned with <b>get()</b> and <b>color()</b> or they may be specified directly using hexadecimal notation such as <b>#FFCC00</b> or <b>0xFFFFCC00</b>. \n<br /> <br />\nUsing <b>print()</b> or <b>println()</b> on a color will produce strange results (usually negative numbers) because of the way colors are stored in memory. A better technique is to use the <b>hex()</b> function to format the color data, or use the <b>red()</b>, <b>green()</b>, and <b>blue()</b> functions to get individual values and print those. The <b>hue()</b>, <b>saturation()</b>, and <b>brightness()</b> functions work in a similar fashion. To extract red, green, and blue values more quickly (for instance when analyzing an image or a frame of video), use <a href=\"rightshift.html\">bit shifting</a>.\n<br /> <br />\nValues can also be created using web color notation. For example: <b>color c = #006699</b>\n<br /> <br />\nWeb color notation only works for opaque colors. To define a color with an alpha value, you can either use <b>color()</b> or hexadecimal notation. For hex notation, prefix the values with <b>0x</b>, for instance <b>color c = 0xCC006699</b>. In that example, <b>CC</b> (the hex value of 204) is the alpha value, and the remainder is identical to a web color. Note that in hexadecimal notation, the alpha value appears in the first position. (The alpha value appears last when used within <b>color()</b>, <b>fill()</b>, and <b>stroke()</b>.) The following is an equivalent way of writing the preceding example, but using <b>color()</b> and specifying the alpha value as its second parameter: <b>color c = color(#006699, 191)</b>\n<br /> <br />\nFrom a technical standpoint, colors are 32 bits of information ordered as <b>AAAAAAAARRRRRRRRGGGGGGGGBBBBBBBB</b> where the A's contain the alpha value, the R's are the red value, G's are green, and B's are blue. Each component is 8 bits (a number between 0 and 255). These values can be manipulated with <a href=\"rightshift.html\">bit shifting</a>.\n",
  "related": [],
  "syntax": [],
  "type": "function",
  "category": "Data",
  "subcategory": "Primitive"
}
