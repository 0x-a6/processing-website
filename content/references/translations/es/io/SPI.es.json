{
  "brief": "Opens an SPI interface as master",
  "methods": [
    {
      "anchor": "SPI_close_",
      "name": "close()",
      "desc": "Closes the SPI interface"
    },
    {
      "anchor": "SPI_list_",
      "name": "list()",
      "desc": "Lists all available SPI interfaces"
    },
    {
      "anchor": "SPI_settings_",
      "name": "settings()",
      "desc": "Configures the SPI interface"
    },
    {
      "anchor": "SPI_transfer_",
      "name": "transfer()",
      "desc": "Transfers data over the SPI bus"
    }
  ],
  "csspath": "../../",
  "isLibrary": "true",
  "classFields": [],
  "description": "Opens an SPI interface as master<br/>\n </br>\n Serial Peripheral Interface (SPI) is a serial bus, commonly used to\n communicate with sensors and memory devices. It uses four pins: MOSI (Master\n Out Slave In), MISO (Master In Slave Out), and SCLK (clock signal) - those\n three are shared among all devices on the bus - as well as one or more SS\n (Slave Select) pins, that are used for the master to signal to the slave\n device that it is the desired respondent for the transmission.<br/>\n <br/>\n The \"master\" device initiates a transfer by pulling the SS pin of the \"slave\"\n low, and begins outputting a clock signal. In SPI, both the \"master\" as well\n as the \"slave\" device output data at the same time. It is hence not possible\n to read data without writing some (even if it means outputting zeros or other\n dummy data).</br>\n </br>\n There are multiple possible configuration settings for SPI, see\n <a href=\"SPI_settings_.html\">settings()</a> for details.</br>\n <br/>\n This library supports multiple SPI objects making use of the same SPI\n interface.",
  "type": "class",
  "constructors": ["SPI(dev)"],
  "related": [],
  "name": "SPI",
  "classanchor": "io/SPI",
  "category": "SPI",
  "subcategory": "",
  "parameters": [
    { "name": "dev", "description": "device name", "type": ["String"] }
  ]
}
